@* @page "/login"
@using System.Security.Claims
@inject AuthService AuthService
@inject NavigationManager Nav
@inject CustomAuthProvider AuthProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control" />
    <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" class="form-control" />
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    [Inject] private AppDbContext Db { get; set; }

    private async Task HandleLogin()
    {
        var user = Db.Users.FirstOrDefault(u => u.Username == loginModel.Email && u.PasswordHash == loginModel.Password);

        if (user != null)
        {
            AuthProvider.SetUser(user);
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var role = authState.User.FindFirst(ClaimTypes.Role)?.Value;

            if (role == "Admin")
                Nav.NavigateTo("/admin/dashboard");
            else
                Nav.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
 *@


@* @page "/login"
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Nav
@inject CustomAuthProvider AuthProvider
@inject AppDbContext Db

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control mb-2" />
    <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" class="form-control mb-2" />
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    
    private async Task HandleLogin()
    {
        try
        {
            loginModel.Email = loginModel.Email?.Trim().ToLower();

            var user = Db.Users.FirstOrDefault(u => u.Email.ToLower() == loginModel.Email);

            if (user != null && BCrypt.Net.BCrypt.Verify(loginModel.Password, user.PasswordHash))
            {
                AuthProvider.SetUser(user);

                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var role = authState.User.FindFirst(ClaimTypes.Role)?.Value;

                if (role == "Admin")
                    Nav.NavigateTo("/admin/dashboard");
                else
                    Nav.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed: " + ex.Message;
            Console.Error.WriteLine(ex); // Optional logging
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
} *@

@page "/login"
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Nav
@inject CustomAuthProvider AuthProvider
@inject AppDbContext Db

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control mb-2" />
    <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" class="form-control mb-2" />
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            loginModel.Email = loginModel.Email?.Trim().ToLower();

            var user = Db.Users.FirstOrDefault(u => u.Email.ToLower() == loginModel.Email && u.PasswordHash == loginModel.Password);

            if (user != null)
            {
                AuthProvider.SetUser(user);

                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var role = authState.User.FindFirst(ClaimTypes.Role)?.Value;

                if (role == "Admin")
                    Nav.NavigateTo("/admin/dashboard");
                else
                    Nav.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed: " + ex.Message;
            Console.Error.WriteLine(ex);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
